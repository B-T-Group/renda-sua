# Cursor Rules for Rendasua Frontend

## API and GraphQL Usage Rules

### CRITICAL: Use Proper Client Hooks for All Requests

#### GraphQL Requests (Hasura)
- **ALWAYS use `useGraphQLClient`** for all Hasura GraphQL requests
- **ALWAYS use `useGraphQLRequest`** hook for executing GraphQL queries and mutations
- **NEVER make direct GraphQL requests** using fetch, axios, or other HTTP clients
- **NEVER bypass authentication** - all requests must go through the authenticated client

#### Backend API Requests
- **ALWAYS use `useApiClient`** for all backend API requests (NestJS endpoints)
- **ALWAYS use the returned axios instance** for making HTTP requests
- **NEVER make direct API requests** using fetch, axios.create(), or other HTTP clients
- **NEVER bypass authentication** - all requests must go through the authenticated client

### Implementation Examples

#### ✅ CORRECT GraphQL Usage
```typescript
import { useGraphQLRequest } from '../hooks/useGraphQLRequest';

const { execute } = useGraphQLRequest(GET_USER_QUERY);
const result = await execute({ userId: '123' });
```

#### ✅ CORRECT Backend API Usage
```typescript
import { useApiClient } from '../hooks/useApiClient';

const apiClient = useApiClient();
const response = await apiClient.post('/addresses', addressData);
```

#### ❌ WRONG - Direct HTTP Requests
```typescript
// DON'T DO THIS
const response = await fetch('/api/addresses', { method: 'POST' });
const response = await axios.post('/api/addresses', data);
const client = new GraphQLClient(url);
```

### Authentication and Security

#### GraphQL Client Features
- **Automatic token management** - handles Auth0 token refresh
- **Proper headers** - includes Authorization and Hasura headers
- **Error handling** - manages authentication errors gracefully
- **Loading states** - provides loading indicators

#### API Client Features
- **Automatic token injection** - adds Auth0 tokens to requests
- **Request/response interceptors** - handles loading states and errors
- **Timeout handling** - 15-second timeout for requests
- **Error handling** - manages API errors consistently

### Migration Guidelines

#### When Updating Existing Code
1. **Replace direct fetch calls** with `useApiClient`
2. **Replace direct GraphQL calls** with `useGraphQLRequest`
3. **Update error handling** to use the client's error management
4. **Update loading states** to use the client's loading management

#### Example Migration
```typescript
// OLD - Direct fetch
const response = await fetch('/api/addresses', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(data)
});

// NEW - Using useApiClient
const apiClient = useApiClient();
const response = await apiClient.post('/addresses', data);
```

### Component Integration

#### Hooks Usage
- **Use `useGraphQLRequest`** for all Hasura operations
- **Use `useApiClient`** for all backend API operations
- **Handle loading states** from the hooks
- **Handle errors** from the hooks

#### Error Handling
- **Always check for client errors** before making requests
- **Use the error states** provided by the hooks
- **Display user-friendly error messages**
- **Log errors** for debugging

### Testing Considerations

#### Mocking
- **Mock the client hooks** in tests, not the underlying HTTP clients
- **Test error scenarios** using the hook's error states
- **Test loading states** using the hook's loading states

#### Integration Testing
- **Test the full request flow** through the hooks
- **Verify authentication** is properly handled
- **Verify error handling** works correctly

### Performance Considerations

#### Caching
- **Use React Query or SWR** for caching if needed
- **Don't cache sensitive data** in localStorage
- **Clear cache** on logout

#### Optimization
- **Memoize query strings** to prevent unnecessary re-renders
- **Use the skip option** to prevent unnecessary requests
- **Batch requests** when possible

### Security Best Practices

#### Token Management
- **Never store tokens** in localStorage or sessionStorage
- **Let Auth0 handle** token refresh automatically
- **Clear tokens** on logout

#### Request Validation
- **Validate input data** before sending requests
- **Sanitize user input** to prevent injection attacks
- **Use TypeScript** for type safety

### Common Patterns

#### Data Fetching Pattern
```typescript
const { data, loading, error, execute } = useGraphQLRequest(QUERY);

useEffect(() => {
  if (!loading && !data) {
    execute();
  }
}, [execute, loading, data]);
```

#### API Call Pattern
```typescript
const apiClient = useApiClient();

const handleSubmit = async (data) => {
  try {
    const response = await apiClient.post('/endpoint', data);
    // Handle success
  } catch (error) {
    // Handle error
  }
};
```

### File Organization

#### Hook Location
- **GraphQL hooks** in `src/hooks/useGraphQL*.ts`
- **API hooks** in `src/hooks/useApi*.ts`
- **Custom hooks** in `src/hooks/` directory

#### Import Structure
```typescript
// GraphQL imports
import { useGraphQLRequest } from '../hooks/useGraphQLRequest';

// API imports
import { useApiClient } from '../hooks/useApiClient';
```

### Compliance Checklist

Before committing any API or GraphQL related code, ensure:

- [ ] All GraphQL requests use `useGraphQLRequest`
- [ ] All backend API requests use `useApiClient`
- [ ] No direct fetch, axios, or GraphQLClient usage
- [ ] Proper error handling implemented
- [ ] Loading states handled correctly
- [ ] Authentication properly configured
- [ ] TypeScript types defined
- [ ] Tests updated to use proper hooks

This ensures consistent, secure, and maintainable API communication throughout the application. 