services:
  postgres:
    image: postgres:15
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.36.0
    platform: linux/arm64
    ports:
      - '8080:8080'
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false' # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## enable subscriptions
      HASURA_GRAPHQL_ENABLE_SUBSCRIPTIONS: 'true'
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      HASURA_GRAPHQL_JWT_SECRET: '{ "anonymous_role": "anonymous", "type": "RS512", "key": "-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIJTuarM19gdd0XMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV\nBAMTFXJlbmRhc3VhLmNhLmF1dGgwLmNvbTAeFw0yNTA3MDQxMjA2MDRaFw0zOTAz\nMTMxMjA2MDRaMCAxHjAcBgNVBAMTFXJlbmRhc3VhLmNhLmF1dGgwLmNvbTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALB6x8yY+a50dhswrBvo4VLhe5OW\nJELTCAABKsKp7KGXJIE8LONIWvuLzo7jP0KszTB1MmZPSPknxC1EBAvMmPfJz7T7\nyhZHlLNiOZ3WPJCFNzpFRmiJ74SABi2T1XYKKiNigIWV60CmKi2wbN11t2KZGyB3\n6KjlkjrPPVHhrxmhaju1sHspcrtLH1cMs/vqkkAFEj4mRYiVzrBKVlgqe+1g10h0\nvAL4ujv+qQWRC4dCjpB+0uoIRbXqCEAjJYjYdwLf4lyhb8i4abA4l/o5Ewwdx+eE\nmK7+CbASrK1rc17cKTR961A+e7zLA7J4+CTnL0k/xR4g4djEovnQo3vYyE0CAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUjyH4rbpg4JvWchljIxmB\nix8y0BkwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAwfx/nwCXQ\nHAYhh8ZY55bCMRAiSuds99u9N6xJKGHuPVxsAZrtT/68x5jqsiUQvJPepypdBFko\nAIY1OWhyBh5LKjbtoBVP8666kWbvTpCr2cM6bGZEYC5Omu6+C3VDlvcTxkt33azo\nf8g9GzxJopcbPzvVox8vscUBl4WD14Lpuwbru8RnE9Cm0dVf9640K7jbEpdDrfXk\nL4HDhwV7BPbe6uHinWOAAKReF8wjQC+sngWWPPXoo4O/zlEgiDkHTonjpA5/AFJd\n3SXM5fYrzeu2YvvFmoCSE6TrgdbZgXxBVwaH58rUJL0IOp5yZ+wUPaK5cfo4cGX+\neRpOT7uifLTZ\n-----END CERTIFICATE-----"}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.46.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: 'false'
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081/api/v1/athena/health']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
volumes:
  db_data:
