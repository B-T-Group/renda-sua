name: Deploy Backend to Lightsail Container

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'package.json'
      - 'Dockerfile.backend'
      - 'nx.json'
      - 'tsconfig.base.json'
      - '.github/workflows/deploy-backend.yml'

  workflow_dispatch:

env:
  AWS_REGION: ca-central-1
  LIGHTSAIL_CONTAINER_SERVICE: rendasua-service
  LIGHTSAIL_CONTAINER_NAME: backend
  ECR_REPOSITORY: groupe-bt-backend
  ECR_REGISTRY: 235680477887.dkr.ecr.ca-central-1.amazonaws.com

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cp apps/backend/.env.development ./apps/backend/.env  
          sed -i "s/HASURA_GRAPHQL_ADMIN_SECRET=.*/HASURA_GRAPHQL_ADMIN_SECRET=${{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }}/" apps/backend/.env
          npx nx build backend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Build and push container to ECR
        run: |
          # Generate image tag (using git SHA for versioning)
          IMAGE_TAG=${{ github.sha }}

          # Build the Docker image
          docker build -f Dockerfile.backend -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

          # Push to ECR
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

          # Store the image URI for deployment
          echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy to Lightsail using ECR image
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LIGHTSAIL_CONTAINER_SERVICE }} \
            --containers '{
              "backend": {
                "image": "'${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'",
                "ports": {
                  "3000": "HTTP"
                },
                "environment": {
                  "NODE_ENV": "production"
                }
              }
            }' \
            --public-endpoint '{
              "containerName": "backend",
              "containerPort": 3000,
              "healthCheck": {
                "healthyThreshold": 2,
                "unhealthyThreshold": 2,
                "timeoutSeconds": 2,
                "intervalSeconds": 5,
                "path": "/health",
                "successCodes": "200-499"
              }
            }'

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."

          # Poll the deployment status until it's stable
          max_attempts=20
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Checking deployment status (attempt $attempt/$max_attempts)..."
            
            DEPLOYMENT_STATUS=$(aws lightsail get-container-services \
              --service-name ${{ env.LIGHTSAIL_CONTAINER_SERVICE }} \
              --query 'containerServices[0].state' \
              --output text)
            
            echo "Current deployment status: $DEPLOYMENT_STATUS"
            
            if [ "$DEPLOYMENT_STATUS" = "RUNNING" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$DEPLOYMENT_STATUS" = "FAILED" ]; then
              echo "❌ Deployment failed!"
              exit 1
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 30 seconds before next check..."
              sleep 30
            fi
            
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Deployment timeout after $max_attempts attempts"
            exit 1
          fi

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(aws lightsail get-container-services \
            --service-name ${{ env.LIGHTSAIL_CONTAINER_SERVICE }} \
            --query 'containerServices[0].url' \
            --output text)
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

          # Test the health endpoint  
          curl -f ${{ env.SERVICE_URL }}/api/health | | {
            echo "Health check failed"
            exit 1
          }

          echo "Deployment successful! Service is available at: ${{ env.SERVICE_URL }}"

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Backend deployed successfully!
              
              **Service URL:** ${{ env.SERVICE_URL }}
              **Image:** ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
              **Deployment Time:** ${{ github.event.head_commit.timestamp }}`
            })
